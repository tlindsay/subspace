// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package subspace

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson94220a8DecodeGithubComTlindsaySubspace(in *jlexer.Lexer, out *Paragraph) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Lines":
			if in.IsNull() {
				in.Skip()
				out.Lines = nil
			} else {
				in.Delim('[')
				if out.Lines == nil {
					if !in.IsDelim(']') {
						out.Lines = make([]Line, 0, 1)
					} else {
						out.Lines = []Line{}
					}
				} else {
					out.Lines = (out.Lines)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Line
					(v1).UnmarshalEasyJSON(in)
					out.Lines = append(out.Lines, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94220a8EncodeGithubComTlindsaySubspace(out *jwriter.Writer, in Paragraph) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Lines\":"
		out.RawString(prefix[1:])
		if in.Lines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Lines {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Paragraph) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94220a8EncodeGithubComTlindsaySubspace(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Paragraph) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94220a8EncodeGithubComTlindsaySubspace(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Paragraph) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94220a8DecodeGithubComTlindsaySubspace(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Paragraph) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94220a8DecodeGithubComTlindsaySubspace(l, v)
}
func easyjson94220a8DecodeGithubComTlindsaySubspace1(in *jlexer.Lexer, out *LineSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(LineSlice, 0, 1)
			} else {
				*out = LineSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Line
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94220a8EncodeGithubComTlindsaySubspace1(out *jwriter.Writer, in LineSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v LineSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94220a8EncodeGithubComTlindsaySubspace1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LineSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94220a8EncodeGithubComTlindsaySubspace1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LineSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94220a8DecodeGithubComTlindsaySubspace1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LineSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94220a8DecodeGithubComTlindsaySubspace1(l, v)
}
func easyjson94220a8DecodeGithubComTlindsaySubspace2(in *jlexer.Lexer, out *Line) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "episode":
			out.Episode = string(in.String())
		case "word_count":
			out.WordCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson94220a8EncodeGithubComTlindsaySubspace2(out *jwriter.Writer, in Line) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"episode\":"
		out.RawString(prefix)
		out.String(string(in.Episode))
	}
	{
		const prefix string = ",\"word_count\":"
		out.RawString(prefix)
		out.Int(int(in.WordCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Line) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson94220a8EncodeGithubComTlindsaySubspace2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Line) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson94220a8EncodeGithubComTlindsaySubspace2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Line) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson94220a8DecodeGithubComTlindsaySubspace2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Line) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson94220a8DecodeGithubComTlindsaySubspace2(l, v)
}
